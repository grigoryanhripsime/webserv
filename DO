A socket is just a thing that allows your operating system to connect to a network in a particular way.
and you would use this whether you are building a server a client or peer-to-peer network

There are a few parts to defining a socket`
1)we are going to have to define the socket itself.(int server_fd = socket(AF_INET, SOCK_STREAM, 0);)->this function call is going to connect our socket to the network  
int socket(int domain, int type, int protocol);
AF_INET ‚Äî —ç—Ç–æ –∞–¥—Ä–µ—Å–Ω–æ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ(domain)->–ó–¥–µ—Å—å AF_INET –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è IPv4-—Å–æ–∫–µ—Ç.(domain of your socket) inchpes nayev`
asvuma vor we are going to select between either TCP or UDP 
/////
SOCK_STREAM ‚Äî —ç—Ç–æ —Ç–∏–ø(type) —Å–æ–∫–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π (TCP) —Å–æ–∫–µ—Ç.
SOCK_STREAM (–ø–æ—Ç–æ–∫–æ–≤—ã–π —Å–æ–∫–µ—Ç)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç TCP (Transmission Control Protocol).

/////
–í –≤—ã–∑–æ–≤–µ socket(AF_INET, SOCK_STREAM, 0) —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç (0) –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
–ï—Å–ª–∏ type = SOCK_STREAM, —Ç–æ 0 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç TCP (IPPROTO_TCP).
–ú–æ–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –≤–º–µ—Å—Ç–æ 0`int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); // TCP
2)than we are going to need to bind the socket to the network(sarqvac sockety miacnum enq neetworkin,toist anun tal socketin),that is to actually give it a name`
(bind(server_fd, (struct sockaddr *) &address, sizeof(address)))
3)then you are going to need to actually listen , but that is for the server itself ,so we are not to need to implement that.`listen(server_fd, 10)



BIND`
–î–∞, —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ bind() —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–∫–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º –∏ –ø–æ—Ä—Ç–æ–º, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ "–¥–∞–≤–∞—è –µ–º—É –∏–º—è" –≤ —Å–µ—Ç–∏.

üîπ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç bind()?
–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∫ IP-–∞–¥—Ä–µ—Å—É –∏ –Ω–æ–º–µ—Ä—É –ø–æ—Ä—Ç–∞.
–î–∞–µ—Ç —Å–æ–∫–µ—Ç—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≤ —Å–µ—Ç–∏.
–û–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ (—á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –∑–Ω–∞–ª–∏, –∫—É–¥–∞ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è).
–í –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–æ–∫–µ—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–µ (–æ–±—ã—á–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π).
üîπ –ü—Ä–æ—Ç–æ—Ç–∏–ø:
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
sockfd ‚Äî –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ socket().
addr ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∞–¥—Ä–µ—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, sockaddr_in –¥–ª—è IPv4).
addrlen ‚Äî —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã addr.

–°–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ–∫–µ—Ç (socket(AF_INET, SOCK_STREAM, 0)).
–ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ sockaddr_in (IPv4, –ø–æ—Ä—Ç 8080, INADDR_ANY –¥–ª—è –≤—Å–µ—Ö IP).
bind() –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–∫–µ—Ç –∫ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É.
–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Å–æ–∫–µ—Ç —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ listen() –∏ accept()).
üîπ –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
–ö–ª–∏–µ–Ω—Ç—ã –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç bind(), –û–° —Å–∞–º–∞ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç IP –∏ –ø–æ—Ä—Ç.
–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç, –æ–Ω —Ç–æ–∂–µ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å bind().
‚úÖ –í—ã–≤–æ–¥
bind() –Ω—É–∂–µ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤, —á—Ç–æ–±—ã "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å" —Å–æ–∫–µ—Ç –≤ —Å–µ—Ç–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.`




—Å–æ–∫–µ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∏–º –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å–µ—Ç–∏.

üîπ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã?
1Ô∏è‚É£ –°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞—ë—Ç —Å–æ–∫–µ—Ç –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
2Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞—ë—Ç —Å–≤–æ–π —Å–æ–∫–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
3Ô∏è‚É£ –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç –º–æ–≥—É—Ç –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏
4Ô∏è‚É£ –ö–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è



–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É bind() –∏ connect()
–§—É–Ω–∫—Ü–∏—è	–ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è?	–ß—Ç–æ –¥–µ–ª–∞–µ—Ç?
bind()	–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ	–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–∫–µ—Ç –∫ IP-–∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É (–¥–∞—ë—Ç –µ–º—É "–∏–º—è" –≤ —Å–µ—Ç–∏).
connect()	–ù–∞ –∫–ª–∏–µ–Ω—Ç–µ	–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.

////////////////////////////////////

–°–æ–∫–µ—Ç ‚Äî —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º. –°–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–∫–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏.

üîπ –°–≤—è–∑—å –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–æ–º –∏ —Å–æ–∫–µ—Ç–æ–º
1Ô∏è‚É£ –°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–µ—Ç —Å–æ–∫–µ—Ç ‚Üí socket()
2Ô∏è‚É£ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –∫ –ø–æ—Ä—Ç—É ‚Üí bind()
3Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Üí listen()
4Ô∏è‚É£ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ‚Üí accept()
5Ô∏è‚É£ –û–±–º–µ–Ω–∏–≤–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç ‚Üí send()/recv()

Server is not a socket, it has a socket


–°–µ—Ä–≤–µ—Ä

–°–æ–∑–¥–∞—ë—Ç —Å–æ–∫–µ—Ç (socket()).

–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –∫ –ø–æ—Ä—Ç—É (bind()).

–°–ª—É—à–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (listen()).

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (accept()).

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã (recv() / send()).

–ö–ª–∏–µ–Ω—Ç

–°–æ–∑–¥–∞—ë—Ç —Å–æ–∫–µ—Ç (socket()).

–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É (connect()).

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å (send()).

–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç (recv()).

üîπ –ú–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç?
–ù–µ—Ç, –µ—Å–ª–∏ —Ç—ã –¥–µ–ª–∞–µ—à—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥–≤–∞ —Å–æ–∫–µ—Ç–∞:

–û–¥–∏–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è).

–û–¥–∏–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (—á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã).


–î–∞, –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.

üîπ –ö–∞–∫ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É?
–ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:




–î–∞, –∫–æ–≥–¥–∞ –º—ã –≤—ã–∑—ã–≤–∞–µ–º bind(), –º—ã –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º (–¥–∞—ë–º) –∏–º—è –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É —Å–æ–∫–µ—Ç—É.

üîπ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç bind()?
bind() —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–∫–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º IP-–∞–¥—Ä–µ—Å–æ–º –∏ –ø–æ—Ä—Ç–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.

–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –∑–Ω–∞–ª, –∫—É–¥–∞ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è.

–ë–µ–∑ bind() —Å–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.

–î–∞, bind() –¥–∞—ë—Ç –∏–º—è (IP) –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É —Å–æ–∫–µ—Ç—É. –ü–æ—Å–ª–µ bind() —Å–µ—Ä–≤–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–∂–∏–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é listen().



int server_socket = socket(AF_INET, SOCK_STREAM, 0); // –°–æ–∑–¥–∞—ë–º —Å–æ–∫–µ—Ç

struct sockaddr_in server_addr;
server_addr.sin_family = AF_INET;
server_addr.sin_port = htons(8080); // –ü–æ—Ä—Ç 8080
server_addr.sin_addr.s_addr = INADDR_ANY; // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö

bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)); // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –∫ IP –∏ –ø–æ—Ä—Ç—É
listen(server_socket, SOMAXCONN); // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
->INADDR_ANY (0.0.0.0) ‚Äî —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP (–ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏ –≤–Ω–µ—à–Ω–∏—Ö).

–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, "192.168.1.100") ‚Äî —Ç–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–º IP.`
int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–∫–µ—Ç–∞" << std::endl;
        return 1;
    }

    sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);  // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ—Ä—Ç—É 8080

    // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.100)
    if (inet_pton(AF_INET, "192.168.1.100", &server_addr.sin_addr) <= 0) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ IP-–∞–¥—Ä–µ—Å–∞" << std::endl;
        return 1;
    }//–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É IP.

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –∫ IP –∏ –ø–æ—Ä—Ç—É
    if (bind(server_socket, (sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        std::cerr << "–û—à–∏–±–∫–∞ bind()" << std::endl;
        return 1;
    }






1)erb skzbic stexcum enq socket(zut haytararum)->ira status@ not bound a
2)henc talis enq iran ip ev port statusy poxvuma bound,u karas sockety bind anes
3)bind aneluc heto statusy poxvuma listenng toist inqy patrasta arden stanal requestner(we are listening out for incoming requests on those details so through that port number we are listening out for clients to connect to this socket through that port number)
4)whether this is another machine on the same local network as the server or indeed the same  machine in our case
for our practicals we are going to keep it nice  and easy and we are going to create the server and the client on the same machine
and get them to talk to each other ,but regardless  of whether it is the same machine or two different computers
on the same network the  client is still going to have to create its  own socket  which as the server did it starts as unbound,and when
the details are added when it is bound you will notice here that the ip address for the client is tha same in this case,this is
going to resemble our practical so the ip address will be the same because it is the same computer but 
the port number will be different and the client does not actually have any Control over the port number,
this is allocated automatically, for the server this can be specified the port number that it wants to listen out on 
but regardless what it can do is put out a request once it is been bound so it can put out a request to connect to the port number
of the server, so even though it exists on its own different port number it can put out a request to connect to the port number 
of the server ,and then once that request has been acknowledged and accepted by the server notice here that we dont just connect the two 
sockets but the server actually duplicates itself actually duplicates the socket to enable the connection beetween the server(tes nkary)


//////////////////////
When we talk about naming a socket, we are talking about assigning a transport address to the socket (a port number in IP networking).


sockaddr_in ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ö (–¥–ª—è IPv4). –ù–∏–∂–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:

üìå 1. IPv4
sockaddr_in ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ IPv4.

struct sockaddr_in {
    sa_family_t sin_family;  // –°–µ–º–µ–π—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ (AF_INET)
    in_port_t sin_port;      // –ü–æ—Ä—Ç (16 –±–∏—Ç, –≤ —Å–µ—Ç–µ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ)
    struct in_addr sin_addr; // IP-–∞–¥—Ä–µ—Å (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ in_addr)
    char sin_zero[8];        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
};


struct in_addr —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–ª–µ:

‚úÖ s_addr ‚Äî —Ö—Ä–∞–Ω–∏—Ç IPv4-–∞–¥—Ä–µ—Å –≤ —Å–µ—Ç–µ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ –±–∞–π—Ç–æ–≤ (big-endian).`
struct in_addr {
    uint32_t s_addr; // IPv4-–∞–¥—Ä–µ—Å –≤ —Å–µ—Ç–µ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ –±–∞–π—Ç–æ–≤
};



sin port->The port number (the transport address). You can explicitly assign a transport address (port) or allow the operating system to assign one. If you‚Äôre a client and won‚Äôt be receiving incoming connections, you‚Äôll usually just let the operating system pick any available port number by specifying port 0. If you‚Äôre a server, you‚Äôll generally pick a specific number since clients will need to know a port number to connect to.
hayeren>’Ü’°’æ’°’∞’°’∂’£’Ω’ø’´ ’∞’°’¥’°÷Ä’® (’ø÷Ä’°’∂’Ω’∫’∏÷Ä’ø’°’µ’´’∂ ’∞’°’Ω÷Å’•’∂): ‘¥’∏÷Ç÷Ñ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’∞’Ω’ø’°’Ø’∏÷Ä’•’∂ ’∂’∑’°’∂’°’Ø’•’¨ ’ø÷Ä’°’∂’Ω’∫’∏÷Ä’ø’°’µ’´’∂ ’∞’°’Ω÷Å’• (’∂’°’æ’°’∞’°’∂’£’´’Ω’ø) ’Ø’°’¥ ’©’∏÷Ç’µ’¨ ’ø’°’¨ ÷Ö’∫’•÷Ä’°÷Å’´’∏’∂ ’∞’°’¥’°’Ø’°÷Ä’£’´’∂ ’∂’∑’°’∂’°’Ø’•’¨ ’°’µ’∂: ‘µ’©’• ‚Äã‚Äã’§’∏÷Ç÷Ñ ’∞’°’≥’°’≠’∏÷Ä’§ ’•÷Ñ ÷á ’¥’∏÷Ç’ø÷Ñ’°’µ’´’∂ ’Ø’°’∫’•÷Ä ’π’•÷Ñ ’Ω’ø’°’∂’°, ’°’∫’° ’Ω’∏’æ’∏÷Ä’°’¢’°÷Ä ’©’∏÷Ç’µ’¨ ’Ø’ø’°÷Ñ ÷Ö’∫’•÷Ä’°÷Å’´’∏’∂ ’∞’°’¥’°’Ø’°÷Ä’£’´’∂ ’®’∂’ø÷Ä’•’¨ ÷Å’°’∂’Ø’°÷Å’°’Æ ’∞’°’Ω’°’∂’•’¨’´ ’∫’∏÷Ä’ø’´ ’∞’°’¥’°÷Ä’ù ’∂’∑’•’¨’∏’æ ’∂’°’æ’°’∞’°’∂’£’´’Ω’ø’® 0: ‘µ’©’• ’Ω’•÷Ä’æ’•÷Ä ’•÷Ñ, ’°’∫’° ’Ω’∏’æ’∏÷Ä’°’¢’°÷Ä ’∏÷Ä’∏’∑’°’Ø’´ ’∞’°’¥’°÷Ä ’Ø’®’∂’ø÷Ä’•÷Ñ, ÷Ñ’°’∂’´ ’∏÷Ä ’∞’°’≥’°’≠’∏÷Ä’§’∂’•÷Ä’® ’∫’•’ø÷Ñ ’ß ’´’¥’°’∂’°’∂ ’∫’∏÷Ä’ø’´ ’∞’°’¥’°÷Ä’® ’¥’´’°’∂’°’¨’∏÷Ç ’∞’°’¥’°÷Ä:


sin_addr`
The address for this socket. This is just your machine‚Äôs IP address. With IP, your machine will have one IP address for each network interface.
For example, if your machine has both Wi-Fi and ethernet connections, that machine will have two addresses, one for each interface.
Most of the time, we don‚Äôt care to specify a specific interface and can let the operating system use whatever it wants.
The special address for this is 0.0.0.0, defined by the symbolic constant INADDR_ANY.

IP —Å–æ–∫–µ—Ç–∞ ‚Äî —ç—Ç–æ IP-–∞–¥—Ä–µ—Å, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–æ–∫–µ—Ç –±—É–¥–µ—Ç –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω. –≠—Ç–æ —Ç–æ—Ç –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç.
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏ Wi-Fi, –∏ Ethernet), —Ç–æ —É –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –±—É–¥—É—Ç —Ä–∞–∑–Ω—ã–µ IP-–∞–¥—Ä–µ—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ —ç—Ç–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä:
Wi-Fi –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å IP-–∞–¥—Ä–µ—Å 192.168.1.100.
Ethernet –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∂–µ—Ç –∏–º–µ—Ç—å IP-–∞–¥—Ä–µ—Å 192.168.0.100.


sa.sin_addr.s_addr = INADDR_ANY;
0.0.0.0 (INADDR_ANY):
0.0.0.0 –∏–ª–∏ INADDR_ANY ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, —á—Ç–æ —Å–æ–∫–µ—Ç –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –ª—é–±–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–∫–µ—Ç –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫–æ –≤—Å–µ–º IP-–∞–¥—Ä–µ—Å–∞–º, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –º–∞—à–∏–Ω–µ, –∏ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ –ª—é–±–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (Wi-Fi, Ethernet, –∏ —Ç.–¥.).
–ö–æ–≥–¥–∞ —Å–æ–∫–µ—Ç –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ INADDR_ANY (0.0.0.0), –æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö.

sa.sin_addr.s_addr = inet_addr("192.168.1.100");
–ï—Å–ª–∏ —Ç—ã —É–∫–∞–∂–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π IP-–∞–¥—Ä–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä 192.168.1.100, —Å–æ–∫–µ—Ç –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω —Ç–æ–ª—å–∫–æ –∫ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É,
–∏ –æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Wi-Fi —Å —ç—Ç–∏–º IP).
–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –µ—Å–ª–∏ –Ω–∞ —Ç–≤–æ–µ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –¥—Ä—É–≥–∏–º IP-–∞–¥—Ä–µ—Å–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 192.168.0.100 –Ω–∞ Ethernet –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ,
—Å–æ–∫–µ—Ç, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ 192.168.1.100, –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.


‘ª’û’∂’π ’ß htons()-’®://Host To Network Short
htons()-’® ÷Ü’∏÷Ç’∂’Ø÷Å’´’° ’ß, ’∏÷Ä’∂ ’´÷Ä’°’Ø’°’∂’°÷Å’∂’∏÷Ç’¥ ’ß ’©’æ’´ ’¢’°’µ’©’°’µ’´’∂ ’Ø’°÷Ä’£’´ ÷É’∏’≠’°’Ø’•÷Ä’∫’∏÷Ç’¥ ’∞’∏’Ω’©’´’∂’£’´ ’Ø’°÷Ä’£’´÷Å ÷Å’°’∂÷Å’°’µ’´’∂ ’Ø’°÷Ä’£’´:

–ó–∞—á–µ–º –≤–∞–∂–µ–Ω —Å–µ—Ç–µ–≤–æ–π –ø–æ—Ä—è–¥–æ–∫ (Big Endian)?
–ö–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø–æ —Å–µ—Ç–∏, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Å–µ—Ç–µ–µ–≤–æ–º –ø–æ—Ä—è–¥–∫–µ –±–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ Big Endian. 
–≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã (Little Endian –∏–ª–∏ Big Endian), 
–º–æ–≥–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–æ —Å–µ—Ç–∏.

’ï’£’ø’°’£’∏÷Ä’Æ’•’¨’∏’æ htons() ’§’∏÷Ç÷Ñ ’°’∫’°’∞’∏’æ’∏÷Ç’¥ ’•÷Ñ, ’∏÷Ä ’∫’∏÷Ä’ø’´ ’°÷Ä’™’•÷Ñ’® ’Ø’æ’•÷Ä’°’Æ’æ’´ ÷Å’°’∂÷Å’°’µ’´’∂ ’Ø’°÷Ä’£’´’ù ’°’∂’Ø’°’≠ ’∂÷Ä’°’∂’´÷Å, ’©’• ’±’•÷Ä ’¥’•÷Ñ’•’∂’°’∂ ’´’∂’π ’¢’°’µ’©’•÷Ä’´ ’Ø’°÷Ä’£’∏’æ ’ß ’°’∑’≠’°’ø’∏÷Ç’¥:
‘µ’©’• ‚Äã‚Äã’§’° ’π’Ø’°’ø’°÷Ä’æ’•÷Ä, ÷Å’°’∂÷Å’´ ’¥’´’ª’∏÷Å’∏’æ ÷É’∏’≠’°’∂÷Å’æ’∏’≤ ’∫’∏÷Ä’ø’® ’Ø’°÷Ä’∏’≤ ’ß÷Ä ’Ω’≠’°’¨ ’¥’•’Ø’∂’°’¢’°’∂’æ’•’¨ ’Ω’ø’°÷Å’∏’≤’´ ’æ÷Ä’°:

’ï÷Ä’´’∂’°’Ø’ù
htons(8080) 8080-’® ÷É’∏’≠’°’Ø’•÷Ä’∫’∏÷Ç’¥ ’ß ÷Å’°’∂÷Å’°’µ’´’∂ ’¢’°’µ’©’•÷Ä’´ ’Ø’°÷Ä’£’´ ÷á ’æ’•÷Ä’°’§’°÷Ä’±’∂’∏÷Ç’¥ ’°’µ’∂:

htons() ’°’∫’°’∞’∏’æ’∏÷Ç’¥ ’ß, ’∏÷Ä ’∂’∏÷Ç’µ’∂’´’Ω’Ø ’•’©’• ’±’•÷Ä ’∞’°’¥’°’Ø’°÷Ä’£’´’π’® ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß Little Endian ’¢’°’µ’©’•÷Ä’´ ’∞’•÷Ä’©’°’Ø’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’®, ’°÷Ä’™’•÷Ñ’® ’Ø÷É’∏’≠’°’∂÷Å’æ’´ ÷Å’°’∂÷Å’´ ’¥’´’ª’∏÷Å’∏’æ ’≥’´’∑’ø ’∞’•÷Ä’©’°’Ø’°’∂’∏÷Ç’©’µ’°’¥’¢:

‘µ’¶÷Ä’°’Ø’°÷Å’∏÷Ç’©’µ’∏÷Ç’∂:
‘ª’∂’π’∏÷Ç htons (): ‘±’∫’°’∞’∏’æ’•’¨’∏÷Ç ’∞’°’¥’°÷Ä, ’∏÷Ä ’©’æ’•÷Ä’® ’≥’´’∑’ø ’∂’•÷Ä’Ø’°’µ’°÷Å’æ’°’Æ ’•’∂ ÷Å’°’∂÷Å’°’µ’´’∂ ’¢’°’µ’©’•÷Ä’´ ’∞’•÷Ä’©’°’Ø’°’∂’∏÷Ç’©’µ’°’¥’¢, ’∏÷Ä’® ’∞’°’¥’°’∫’°’ø’°’Ω’≠’°’∂’∏÷Ç’¥ ’ß ÷Å’°’∂÷Å’´ ’Ω’ø’°’∂’§’°÷Ä’ø’∂’•÷Ä’´’∂ (Big Endian):





ACCEPT`
–ö–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞: –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç.–µ. –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π), —Ñ—É–Ω–∫—Ü–∏—è accept() –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –æ–∂–∏–¥–∞—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.

–ö–æ–≥–¥–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ), accept() —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ—Ç —ç—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤–µ—Ä–Ω—ë—Ç —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è —Å —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞.

–ö–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞—è, accept() –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –æ–∂–∏–¥–∞—è, –ø–æ–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.

–ö–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥—å –Ω–µ –ø—É—Å—Ç–∞ (—Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ), accept() –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏–º–µ—Ç –µ–≥–æ.

–ü—Ä–∏–º–µ—Ä:
–°–µ—Ä–≤–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç listen(server_fd, 10), —á—Ç–æ–±—ã –æ–∂–∏–¥–∞—Ç—å –¥–æ 10 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏.

–ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –∑–∞–ø—Ä–æ—Å), accept() –≤–µ—Ä–Ω—ë—Ç —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

–ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, —Ç–æ accept() –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏.

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –¥–∞–∂–µ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏ accept() –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.


–ö–æ–≥–¥–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤, accept() –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∞ –Ω–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
–ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3 –∑–∞–ø—Ä–æ—Å–∞), accept() —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –≤–µ—Ä–Ω—ë—Ç —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è,
–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–∏—Å—Ç—É–ø–∏—Ç –∫–æ –≤—Ç–æ—Ä–æ–º—É.

–ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ. –ö–∞–∂–¥—ã–π –≤—ã–∑–æ–≤ accept() –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ,
–ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–º–µ—Ç –æ–¥–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –ø–æ—Å–ª–µ —á–µ–≥–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–µ –±—É–¥—É—Ç, —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∑–∞ —Ä–∞–∑).
–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≤–µ—Ä—à–∏—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–∏–º –∏–ª–∏ –∑–∞–∫—Ä–æ–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ),
–æ–Ω –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å accept() —Å–Ω–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.

–ü—Ä–∏–º–µ—Ä:
–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –≤ –æ—á–µ—Ä–µ–¥–∏ 3 –∑–∞–ø—Ä–æ—Å–∞:
–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç –ø–µ—Ä–≤—ã–º –∏ –≤–æ–∑–≤—Ä–∞—â—ë–Ω —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä.
–í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å, –ø–æ–∫–∞ –ø–µ—Ä–≤—ã–π –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
–¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å, –ø–æ–∫–∞ –≤—Ç–æ—Ä–æ–π –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.

–û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å:
–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ–º —Ä–µ–∂–∏–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏ –∏–ª–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏), —Ç–æ –∑–∞–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ,
–Ω–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
–í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–¥–∏–Ω –ø–æ—Ç–æ–∫, –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –∏ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∂–¥–∞—Ç—å,
–ø–æ–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω.


int client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &client_len);
client_fd ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º.
–¢–µ–ø–µ—Ä—å —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ä–æ–¥–µ read() –∏ write().

–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–æ–∫–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π,
–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–π –∏–∑ accept(), –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º.

–§—É–Ω–∫—Ü–∏—è accept() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–æ–∫–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞.
–≠—Ç–æ—Ç –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.


–°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–µ—Ç —Å–ª—É—à–∞—é—â–∏–π —Å–æ–∫–µ—Ç —Å –ø–æ–º–æ—â—å—é socket() –∏ bind(), –∏ –∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç listen(), —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
–ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, —Å–µ—Ä–≤–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç accept(). –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–æ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
–§—É–Ω–∫—Ü–∏—è accept() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º.
–≠—Ç–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º.




/////KAREVOR
–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è hello –≤ –∫–æ–¥–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ HTTP + —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞.
–ö–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –ø–∏—à–µ—Ç`write(new_socket , hello , strlen(hello));
–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –Ω–µ —Ç–æ–ª—å–∫–æ —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞, –Ω–æ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—Ä–∞—É–∑–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.
–ë—Ä–∞—É–∑–µ—Ä —Å–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ (HTTP/1.1 200 OK –∏ –¥—Ä—É–≥–∏–µ), –∞ –∑–∞—Ç–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ (–ü—Ä–∏–≤–µ—Ç, –º–æ–π —Å–∞–π—Ç!).
üìå –í–∞–∂–Ω–æ!
–ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏, –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–π–º—ë—Ç, —á—Ç–æ —ç—Ç–æ HTTP-–æ—Ç–≤–µ—Ç, –∏ –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–∏—Å–Ω—É—Ç—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É.



//////////SEND AND RECV(receive)
–§—É–Ω–∫—Ü–∏–∏ send –∏ recv –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–∫–µ—Ç–∞—Ö.
–û–Ω–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã write –∏ read, –Ω–æ –∏–º–µ—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, MSG_DONTWAIT –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ —Ä–µ–∂–∏–º–∞).
–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É send/recv –∏ write/read –≤ —Ç–æ–º, —á—Ç–æ send/recv –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —Ñ–ª–∞–≥–∏ –¥–ª—è —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö.
ssize_t send(int sockfd, const void *buf, size_t len, int flags);
ssize_t recv(int sockfd, void *buf, size_t len, int flags);
sockfd ‚Äî –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π).
–û–±–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç–æ–º, —Ç–∞–∫ –∏ —Å–µ—Ä–≤–µ—Ä–æ–º.


esli klient ispolzuyet send dlya otpravki zaprosa na server na send-e kakoy soket budem dat klientskiy ili serverskiy?
–ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç send, –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Å–≤–æ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç.
–ï—Å–ª–∏ —Ç—ã –∫–ª–∏–µ–Ω—Ç, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å socket() –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω —á–µ—Ä–µ–∑ connect().
–ï—Å–ª–∏ —Ç—ã —Å–µ—Ä–≤–µ—Ä, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ accept().
üìå –ü—Ä–∏–º–µ—Ä –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ:
–ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞—ë—Ç —Å–æ–∫–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É:
int sock = socket(AF_INET, SOCK_STREAM, 0); // –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç
connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr));
send(sock, "Hello, server!", 14, 0); // –ü–µ—Ä–µ–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç
‚úÖ –ó–¥–µ—Å—å –≤ send() –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç sock!

üìå –ü—Ä–∏–º–µ—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:
–°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç (accept):
int server_fd = socket(AF_INET, SOCK_STREAM, 0);
bind(server_fd, (struct sockaddr *)&address, sizeof(address));
listen(server_fd, 10);
int new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen); 
recv(new_socket, buffer, 1024, 0); // –ò—Å–ø–æ–ª—å–∑—É–µ–º `new_socket`, –∞ –Ω–µ `server_fd`
send(new_socket, "Hello, client!", 14, 0); // –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
‚úÖ –°–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç new_socket, –ø–æ—Ç–æ–º—É —á—Ç–æ server_fd ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ "–¥–≤–µ—Ä—å" –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π!///KAREVOR


no na pervom shage klient budet ispolzvat send(spomoshyu klientskax sokete) dlya otpravka zaprosa na server,
aa server budet delat recv(spomoshyu soketa,kotoriy sozdovayetca spomoshyu accept) dlya poluchenie zapros
(grubo govorya klient delayet write a server delayet read u poluchayet zapros ot klienta)
ya pravilno ponyl?
–î–∞, —Ç—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª! üëç

üîπ –ö–∞–∫ –∏–¥—ë—Ç –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º?
–ö–ª–∏–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç send() (write), –æ—Ç–ø—Ä–∞–≤–ª—è—è –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ —Å–≤–æ–π –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç.

–°–µ—Ä–≤–µ—Ä –¥–µ–ª–∞–µ—Ç recv() (read), –ø—Ä–∏–Ω–∏–º–∞—è –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–æ–∫–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ accept().

–°–µ—Ä–≤–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç—É —Å –ø–æ–º–æ—â—å—é send().

–ö–ª–∏–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç recv(), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞.






///////////////URI and URL////////////////////////////
–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É URI –∏ URL
URL (Uniform Resource Locator) - –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–µ—Å—É—Ä—Å–∞:
Copy
https://example.com:8080/cgi-bin/script.py?param=value#section
–°–æ—Å—Ç–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏:

https ‚Äî –ø—Ä–æ—Ç–æ–∫–æ–ª

example.com ‚Äî –¥–æ–º–µ–Ω

8080 ‚Äî –ø–æ—Ä—Ç

/cgi-bin/script.py ‚Äî URI (—Å–º. –Ω–∏–∂–µ)

?param=value ‚Äî query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã

#section ‚Äî —è–∫–æ—Ä—å

URI (Uniform Resource Identifier) - –ß–∞—Å—Ç—å URL, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∞—è —Ä–µ—Å—É—Ä—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:
Copy
/cgi-bin/script.py
–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:

–í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /

–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞—Ö location –≤ –∫–æ–Ω—Ñ–∏–≥–µ

–ü—Ä–∏–º–µ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
–ó–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:

Copy
GET http://example.com:8080/cgi-bin/hello.py?name=John
–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Å–µ—Ä–≤–µ—Ä–µ:

URL —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏:

URI: /cgi-bin/hello.py

Query: name=John

–°–µ—Ä–≤–µ—Ä –∏—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π location:

nginx
Copy
location /cgi-bin { ... }  # –≠—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:

.py ‚Üí –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ /usr/bin/python3 hello.py?name=John

–ò—Ç–æ–≥–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã:
–í location —Å CGI –º–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä—É–≥–∏–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã (root, allow_methods –∏ —Ç.–¥.)

URI ‚Äî —ç—Ç–æ —á–∞—Å—Ç—å URL (–ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å—É), –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à location





/////////////////
prkvanq vor senc ban ka
–í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx –∏ –≤–∞—à–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–µ –¥–∏—Ä–µ–∫—Ç–∏–≤–∞ error_page –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —É–∫–∞–∑–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –æ—à–∏–±–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –∫–æ–¥–æ–≤. –í–∞—à –ø—Ä–∏–º–µ—Ä:
error_page 500 502 503 504 /50x.html /52x.html;  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!
///////////////////





//////////////EPOLL////////////////////
epoll ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π API Linux (—Ç–æ –µ—Å—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤), –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (–æ–±—ã—á–Ω–æ —Å–µ—Ç–µ–≤—ã—Ö):

1)–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤,
2)–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.
–ò –≤–æ—Ç —Ç—É—Ç –Ω–∞ –ø–æ–º–æ—â—å –ø—Ä–∏—Ö–æ–¥–∏—Ç epoll.

–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç epoll?
–¢—ã —Å–æ–∑–¥–∞–µ—à—å epoll –æ–±—ä–µ–∫—Ç:`int epoll_fd = epoll_create1(0);

–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å —Ç—É–¥–∞ —Å–æ–∫–µ—Ç—ã (—Ñ–∞–π–ª–æ–≤—ã–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã):
epoll_event ev;
ev.events = EPOLLIN;
ev.data.fd = client_fd;
epoll_ctl(epoll_fd, EPOLL_CTL_ADD, client_fd, &ev);

–ò –ø–æ—Ç–æ–º –∂–¥—ë—à—å —Å–æ–±—ã—Ç–∏–π:
epoll_event events[MAX_EVENTS];
int nfds = epoll_wait(epoll_fd, events, MAX_EVENTS, timeout);


–ë–µ–∑ epoll: –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–π, –±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Å–µ—Ä–≤–µ—Ä
–¢–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ —Ä–∞–∑.
–û—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –∂–¥—É—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ (queue backlog), –ø–æ–∫–∞ —ç—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç epoll:
–û–Ω –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–∞–∂–¥–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.
–û–Ω —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç —á—Ç–æ-—Ç–æ –ø—Ä–∏—Å–ª–∞–ª).
–û–Ω –º–æ–∂–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–æ–∫–µ—Ç–æ–≤ –∏ —Å—Ä–∞–∑—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–µ–º–∏, –∫—Ç–æ –∞–∫—Ç–∏–≤–µ–Ω.

–ß—Ç–æ —Ç–∞–∫–æ–µ non-blocking?
–û–±—ã—á–Ω–æ, –∫–æ–≥–¥–∞ —Ç—ã –≤—ã–∑—ã–≤–∞–µ—à—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, accept(), read() –∏–ª–∏ recv(),
–ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∏ –∂–¥—ë—Ç, –ø–æ–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è. –≠—Ç–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–ª–æ–∫–∏—Ä—É—é—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
–ö–æ–≥–¥–∞ —Ç—ã –¥–µ–ª–∞–µ—à—å –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤, –æ–Ω –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –∂–¥–∞—Ç—å.
–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç—ã —á–∏—Ç–∞–µ—à—å –∏–∑ —Å–æ–∫–µ—Ç–∞, –∏ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç, —Ñ—É–Ω–∫—Ü–∏—è read() —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –Ω–µ –∑–∞–≤–∏—Å–∞—è.

char buffer[1024];
int bytes = recv(client_fd, buffer, 1024, 0); // –ë–ª–æ–∫–∏—Ä—É–µ—Ç, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç
–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–æ—Å—Ç–æ –∂–¥—ë—Ç.

–ó–∞—á–µ–º –Ω—É–∂–µ–Ω non-blocking?
–û–Ω –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —Ç–≤–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ ‚Äú–∑–∞–ª–∏–ø–∞–ª‚Äù –Ω–∞ –æ–¥–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ,
–∞ –º–æ–≥ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö, –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –µ—â—ë –ø–∏—à–µ—Ç/—á—Ç—ë—Ç/–∂–¥—ë—Ç.

EPOLL
epoll, —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ—Å—è—Ç–∫–∏ –∏ —Å–æ—Ç–Ω–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞/–ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ.
//////////////////////////
int flags = fcntl(fd, F_GETFL, 0);
fd ‚Äî —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:
—Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–æ–∫–µ—Ç (server_fd)
–∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç (client_fd)
–ª—é–±–æ–π –¥—Ä—É–≥–æ–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä (—Ñ–∞–π–ª, pipe –∏ —Ç.–¥.)

fcntl ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–º–∏ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏ (–∞ server_fd ‚Äî —ç—Ç–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞).
F_GETFL ‚Äî –≥–æ–≤–æ—Ä–∏—Ç: "–ø–æ–ª—É—á–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–ª–∞–≥–∏" (–Ω–∞–ø—Ä–∏–º–µ—Ä, O_NONBLOCK, O_RDONLY –∏ —Ç.–¥.).
server_fd ‚Äî —ç—Ç–æ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Ç–≤–æ–µ–≥–æ —Å–æ–∫–µ—Ç–∞ (–∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏–ª —á–µ—Ä–µ–∑ socket()).


fcntl(server_fd, F_SETFL, flags | O_NONBLOCK);
F_SETFL ‚Äî –≥–æ–≤–æ—Ä–∏—Ç: "—É—Å—Ç–∞–Ω–æ–≤–∏ —Ñ–ª–∞–≥–∏".
flags | O_NONBLOCK ‚Äî —Ç—ã –±–µ—Ä—ë—à—å —Ç–µ–∫—É—â–∏–µ —Ñ–ª–∞–≥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—à—å –∫ –Ω–∏–º O_NONBLOCK, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–æ–∫–µ—Ç –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–º.
| ‚Äî —ç—Ç–æ –ø–æ–±–∏—Ç–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è "–ò–õ–ò", –¥–æ–±–∞–≤–ª—è—é—â–∞—è —Ñ–ª–∞–≥.
O_NONBLOCK ‚Äî —Ñ–ª–∞–≥ "–Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å": –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å -1 –≤–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–Ω–∏—è.

–í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:
–≠—Ç–æ—Ç —Å–æ–∫–µ—Ç (fd) –Ω–µ –±—É–¥–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–∏ accept, recv, send, –∏ —Ç.–¥.
–í–º–µ—Å—Ç–æ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—ë—Ç -1, –∞ errno —Å–∫–∞–∂–µ—Ç "–Ω–∏—á–µ–≥–æ –Ω–µ—Ç" (EAGAIN –∏–ª–∏ EWOULDBLOCK).
 –° –ø–æ–º–æ—â—å—é fcntl –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–æ–∫–µ—Ç–∞.
7////////////////////////////////
–ë–µ–∑ epoll —Ç–≤–æ–π —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º –∫–ª–∏–µ–Ω—Ç–µ ‚Äî –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å –º–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.

/////////////////////////////
int epoll_fd = epoll_create1(0);
–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∫–µ—Ç–æ–≤),
—á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è: —á—Ç–µ–Ω–∏–µ, –∑–∞–ø–∏—Å—å, –æ—à–∏–±–∫–∏ –∏ —Ç.–¥.
–ú—ã —Å–æ–∑–¥–∞—ë–º epoll_fd, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ —Å–æ–∫–µ—Ç—ã –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–æ–∫–µ—Ç—ã).
–≠—Ç–æ—Ç 0 ‚Äî —Ñ–ª–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å. –ù–æ:
–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥–∞—ë—à—å 0, –∑–Ω–∞—á–∏—Ç –Ω–∏–∫–∞–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è.
–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å EPOLL_CLOEXEC, —á—Ç–æ–±—ã –ø—Ä–∏ exec() —ç—Ç–æ—Ç epoll_fd –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–ª—Å—è.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç epoll_create1()?
–û–Ω–∞ —Å–æ–∑–¥–∞—ë—Ç epoll instance, —Ç.–µ. —è–¥—Ä–æ —Å–æ–∑–¥–∞—ë—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É),
–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ —Å–æ–∫–µ—Ç–∞—Ö).

//////////////////////////
epoll_event ev = {};
ev.events = EPOLLIN;       // –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è"
ev.data.fd = socket_fd;    // –∫–∞–∫–æ–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å
//////////
–ú—ã –≥–æ–≤–æ—Ä–∏–º epoll, —á—Ç–æ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞ server_fd (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–æ–∫–µ—Ç).
–°–æ–±—ã—Ç–∏–µ EPOLLIN –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,
–∫–æ–≥–¥–∞ —Å–æ–∫–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ —á—Ç–µ–Ω–∏—é (—Ç–æ –µ—Å—Ç—å, –∫–æ–≥–¥–∞ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è)
////////
epoll_ctl(epoll_fd, EPOLL_CTL_ADD, socket_fd, &ev);
–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å, —É–¥–∞–ª—è—Ç—å –∏–ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∫–µ—Ç—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ epoll –¥–æ–ª–∂–µ–Ω —Å–ª–µ–¥–∏—Ç—å.

epoll_event ‚Äî —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é epoll.
struct epoll_event {
    uint32_t events;  // —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, EPOLLIN, EPOLLOUT)
    epoll_data_t data; // –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ–º —Å —Å–æ–±—ã—Ç–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–ª–∏ —Ñ–∞–π–ª–æ–≤—ã–π –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä)
};
–ú—ã —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É epoll_event, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –Ω–∞ —Å–æ–∫–µ—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä,
–∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Å–æ–∫–µ—Ç).
–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ epoll —Å –ø–æ–º–æ—â—å—é epoll_ctl.
–ö–æ–≥–¥–∞ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –º—ã –ø–æ–ª—É—á–∏–º —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ epoll_wait.

//////////////
EPOLL_CTL_ADD ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä.
EPOLL_CTL_MOD ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–æ–±—ã—Ç–∏—è.
EPOLL_CTL_DEL ‚Äî —É–¥–∞–ª–∏—Ç—å –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
//////////////
EPOLLIN ‚Äî —Å–æ–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ —á—Ç–µ–Ω–∏—é (–µ—Å—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ).
EPOLLOUT ‚Äî –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ —Å–æ–∫–µ—Ç.
EPOLLERR ‚Äî –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
//////////////
epoll_event events[MAX_EVENTS];//üì• events ‚Äî –º–∞—Å—Å–∏–≤, –∫—É–¥–∞ –∑–∞–ø–∏—à—É—Ç—Å—è –ø—Ä–æ–∏–∑–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è.
int n = epoll_wait(epoll_fd, events, MAX_EVENTS, -1);
epoll_wait() ‚Äî —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∂–¥—ë—Ç —Å–æ–±—ã—Ç–∏—è,
–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–∞ –æ–¥–Ω–æ–º –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞—Ö, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ epoll.
–û–∂–∏–¥–∞–µ—Ç —Å–æ–±—ã—Ç–∏–π –Ω–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞—Ö.
–ö–æ–≥–¥–∞ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–æ–±—ã—Ç–∏–π.
epoll_fd ‚Äî –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä epoll, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ.

events ‚Äî –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã —Å–æ–±—ã—Ç–∏—è.

MAX_EVENTS ‚Äî —Å–∫–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–π –º–∞–∫—Å–∏–º—É–º –∂–¥–∞—Ç—å.

timeout:
-1 ‚Äî –∂–¥–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ.
0 ‚Äî –Ω–µ –∂–¥–∞—Ç—å (poll).
>0 ‚Äî –∂–¥–∞—Ç—å –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥.

–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ (—á–∏—Å–ª–æ —Å–æ–±—ã—Ç–∏–π).
0 ‚Äî –µ—Å–ª–∏ timeout –∏—Å—Ç—ë–∫.
-1 ‚Äî –æ—à–∏–±–∫–∞.




/////////////////
"–ö–æ–≥–¥–∞ —è –æ—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –∏ –ø–∏—à—É localhost:8080, —ç—Ç–æ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ?"
‚úÖ –î–∞! –≠—Ç–æ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ –±—Ä–∞—É–∑–µ—Ä –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä.






POST /upload HTTP/1.1\r\n
Host: example.com\r\n
Content-Type: multipart/form-data; boundary=xyz123\r\n
Content-Length: 1000\r\n
\r\n  ‚Üê –ó–¥–µ—Å—å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—ç—Ç–æ –∏ –µ—Å—Ç—å `\r\n\r\n`)
BODY_STARTS_HERE...




–î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã (application/x-www-form-urlencoded):
–î–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–∞—Ä—Å—è—Ç—Å—è –≤ form_data map
–ù–µ —Å–æ–∑–¥–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫–µ
–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ (–∏–ª–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ CGI)


// std::string Request::post_method_tasovka(char *buffer)
// {
//     std::vector<LocationDirective*> locdir = servers[servIndex]->getLocdir();
//     parse_post_request(buffer);
//     if (error_page_num == 413) {
//         std::string filePath = getFilepath("/web/error413.html");
//         return get_need_string_that_we_must_be_pass_send_system_call(filePath);
//     }
//     std::string response_body;
//     if (MainContentType.find("application/x-www-form-urlencoded") != std::string::npos)
//     {
//         std::cout << "EKANQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQqq\n";
//         std::cout << post_body<<std::endl;
//         parseUrlEncodedForm(post_body);
//         // Build response from parsed form data
//         std::stringstream ss;
//         ss << "Received form data:\n";
//         for (std::map<std::string, std::string>::const_iterator it = form_data.begin(); 
//              it != form_data.end(); ++it) {
//             ss << it->first << " = " << it->second << "\n";
//         }
//         response_body = ss.str();
//     }
//     else if (MainContentType == "multipart/form-data")
//     {
//         ///////////////check upload_dir//////////////////
//         int locIndex = servers[servIndex]->get_locIndex();
//         std::cout << "mtanq kino = " << locIndex << std::endl;
//             std::string upload_dir = locdir[locIndex]->getUpload_dir();
//         std::cout << "UPLOAD DIR->" << upload_dir << std::endl;
//         if (upload_dir.empty()) {
//             // –ï—Å–ª–∏ upload_dir –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 403 Forbidden
//             std::string filePath = getFilepath("/web/error403.html");
//             return get_need_string_that_we_must_be_pass_send_system_call(filePath);
//         }

//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ upload_dir –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø—É—Ç–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º root
//         if (upload_dir[0] != '/') {
//             std::string root =  (locdir[locIndex]->getRoot() != "") ? locdir[locIndex]->getRoot() : servers[servIndex]->getRoot();
//             upload_dir = root + "/" + upload_dir;
//         }
//         else
//         {
//             upload_dir = upload_dir.substr(1);
//             std::string root =  (locdir[locIndex]->getRoot() != "") ? locdir[locIndex]->getRoot() : servers[servIndex]->getRoot();
//             upload_dir = root + "/" + upload_dir;
//         }
//         // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π —Å–ª—ç—à, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø—É—Ç—è–º–∏
//         if (!upload_dir.empty() && upload_dir[upload_dir.size() - 1] == '/') {
//             upload_dir.erase(upload_dir.size() - 1);
//         }
//         ///////////////////done check upload_dir//////////////
//         // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤ –¥–ª—è multipart/form-data
//         response_body = handle_multipart_upload(upload_dir);
//     } 
//     else
//     {
//         std::string upload_dir = locdir[locIndex]->getUpload_dir();
//         // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, application/x-www-form-urlencoded)
//         response_body = handle_simple_post(upload_dir);
//     }
//     std::cout << "RESPONSE BODY->>" << response_body << std::endl;

//     // –§–æ—Ä–º–∏—Ä—É–µ–º HTTP-–æ—Ç–≤–µ—Ç
//     std::stringstream ss;
//     ss << "HTTP/1.1 200 OK\r\n"
//        << "Content-Length: " << response_body.size() << "\r\n"
//        << "Content-Type: text/plain\r\n"
//        << "\r\n"
//        << response_body;

//     return ss.str();
// }



kogda content-type application/x-www-form-urlencoded upload_dir ispolzuyetca na nginxe?