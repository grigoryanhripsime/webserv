A socket is just a thing that allows your operating system to connect to a network in a particular way.
and you would use this whether you are building a server a client or peer-to-peer network

There are a few parts to defining a socket`
1)we are going to have to define the socket itself.(int server_fd = socket(AF_INET, SOCK_STREAM, 0);)->this function call is going to connect our socket to the network  
int socket(int domain, int type, int protocol);
AF_INET ‚Äî —ç—Ç–æ –∞–¥—Ä–µ—Å–Ω–æ–µ —Å–µ–º–µ–π—Å—Ç–≤–æ(domain)->–ó–¥–µ—Å—å AF_INET –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è IPv4-—Å–æ–∫–µ—Ç.(domain of your socket)
/////
SOCK_STREAM ‚Äî —ç—Ç–æ —Ç–∏–ø(type) —Å–æ–∫–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–∑–Ω–∞—á–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π (TCP) —Å–æ–∫–µ—Ç.
SOCK_STREAM (–ø–æ—Ç–æ–∫–æ–≤—ã–π —Å–æ–∫–µ—Ç)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç TCP (Transmission Control Protocol).

/////
–í –≤—ã–∑–æ–≤–µ socket(AF_INET, SOCK_STREAM, 0) —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç (0) –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
–ï—Å–ª–∏ type = SOCK_STREAM, —Ç–æ 0 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç TCP (IPPROTO_TCP).
–ú–æ–∂–Ω–æ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –≤–º–µ—Å—Ç–æ 0`int sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP); // TCP
2)than we are going to need to bind the socket to the network(sarqvac sockety miacnum enq neetworkin,toist anun tal socketin),that is to actually give it a name`
(bind(server_fd, (struct sockaddr *) &address, sizeof(address)))
3)then you are going to need to actually listen , but that is for the server itself ,so we are not to need to implement that.`listen(server_fd, 10)



BIND`
–î–∞, —Å–∏—Å—Ç–µ–º–Ω—ã–π –≤—ã–∑–æ–≤ bind() —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–∫–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º –∏ –ø–æ—Ä—Ç–æ–º, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ "–¥–∞–≤–∞—è –µ–º—É –∏–º—è" –≤ —Å–µ—Ç–∏.

üîπ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç bind()?
–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞ –∫ IP-–∞–¥—Ä–µ—Å—É –∏ –Ω–æ–º–µ—Ä—É –ø–æ—Ä—Ç–∞.
–î–∞–µ—Ç —Å–æ–∫–µ—Ç—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≤ —Å–µ—Ç–∏.
–û–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ (—á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç—ã –∑–Ω–∞–ª–∏, –∫—É–¥–∞ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è).
–í –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–æ–∫–µ—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–µ (–æ–±—ã—á–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π).
üîπ –ü—Ä–æ—Ç–æ—Ç–∏–ø:
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
sockfd ‚Äî –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä —Å–æ–∫–µ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–µ—Ä–µ–∑ socket().
addr ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∞–¥—Ä–µ—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, sockaddr_in –¥–ª—è IPv4).
addrlen ‚Äî —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã addr.

–°–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ–∫–µ—Ç (socket(AF_INET, SOCK_STREAM, 0)).
–ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ sockaddr_in (IPv4, –ø–æ—Ä—Ç 8080, INADDR_ANY –¥–ª—è –≤—Å–µ—Ö IP).
bind() –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–∫–µ—Ç –∫ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É.
–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Å–æ–∫–µ—Ç —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ listen() –∏ accept()).
üîπ –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
–ö–ª–∏–µ–Ω—Ç—ã –æ–±—ã—á–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç bind(), –û–° —Å–∞–º–∞ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç IP –∏ –ø–æ—Ä—Ç.
–ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç, –æ–Ω —Ç–æ–∂–µ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å bind().
‚úÖ –í—ã–≤–æ–¥
bind() –Ω—É–∂–µ–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤, —á—Ç–æ–±—ã "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å" —Å–æ–∫–µ—Ç –≤ —Å–µ—Ç–∏ –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.`




—Å–æ–∫–µ—Ç—ã —Å–æ–∑–¥–∞—é—Ç —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –ø–æ–∑–≤–æ–ª—è—é—Ç –∏–º –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å–µ—Ç–∏.

üîπ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç—ã?
1Ô∏è‚É£ –°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞—ë—Ç —Å–æ–∫–µ—Ç –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
2Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞—ë—Ç —Å–≤–æ–π —Å–æ–∫–µ—Ç –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
3Ô∏è‚É£ –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç –º–æ–≥—É—Ç –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏
4Ô∏è‚É£ –ö–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è



–†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É bind() –∏ connect()
–§—É–Ω–∫—Ü–∏—è	–ì–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è?	–ß—Ç–æ –¥–µ–ª–∞–µ—Ç?
bind()	–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ	–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–∫–µ—Ç –∫ IP-–∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É (–¥–∞—ë—Ç –µ–º—É "–∏–º—è" –≤ —Å–µ—Ç–∏).
connect()	–ù–∞ –∫–ª–∏–µ–Ω—Ç–µ	–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.

////////////////////////////////////

–°–æ–∫–µ—Ç ‚Äî —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º. –°–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–∫–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏.

üîπ –°–≤—è–∑—å –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–æ–º –∏ —Å–æ–∫–µ—Ç–æ–º
1Ô∏è‚É£ –°–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–µ—Ç —Å–æ–∫–µ—Ç ‚Üí socket()
2Ô∏è‚É£ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –∫ –ø–æ—Ä—Ç—É ‚Üí bind()
3Ô∏è‚É£ –ù–∞—á–∏–Ω–∞–µ—Ç —Å–ª—É—à–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ‚Üí listen()
4Ô∏è‚É£ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ‚Üí accept()
5Ô∏è‚É£ –û–±–º–µ–Ω–∏–≤–∞–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç ‚Üí send()/recv()

Server is not a socket, it has a socket


–°–µ—Ä–≤–µ—Ä

–°–æ–∑–¥–∞—ë—Ç —Å–æ–∫–µ—Ç (socket()).

–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –∫ –ø–æ—Ä—Ç—É (bind()).

–°–ª—É—à–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (listen()).

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (accept()).

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã (recv() / send()).

–ö–ª–∏–µ–Ω—Ç

–°–æ–∑–¥–∞—ë—Ç —Å–æ–∫–µ—Ç (socket()).

–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É (connect()).

–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å (send()).

–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç (recv()).

üîπ –ú–æ–∂–µ—Ç –ª–∏ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–æ–∫–µ—Ç?
–ù–µ—Ç, –µ—Å–ª–∏ —Ç—ã –¥–µ–ª–∞–µ—à—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –¥–≤–∞ —Å–æ–∫–µ—Ç–∞:

–û–¥–∏–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (—á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è).

–û–¥–∏–Ω –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ (—á—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã).


–î–∞, –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.

üîπ –ö–∞–∫ –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É?
–ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç IP-–∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:




–î–∞, –∫–æ–≥–¥–∞ –º—ã –≤—ã–∑—ã–≤–∞–µ–º bind(), –º—ã –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º (–¥–∞—ë–º) –∏–º—è –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É —Å–æ–∫–µ—Ç—É.

üîπ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç bind()?
bind() —Å–≤—è–∑—ã–≤–∞–µ—Ç —Å–æ–∫–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º IP-–∞–¥—Ä–µ—Å–æ–º –∏ –ø–æ—Ä—Ç–æ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.

–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã –∫–ª–∏–µ–Ω—Ç –∑–Ω–∞–ª, –∫—É–¥–∞ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è.

–ë–µ–∑ bind() —Å–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.

–î–∞, bind() –¥–∞—ë—Ç –∏–º—è (IP) –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É —Å–æ–∫–µ—Ç—É. –ü–æ—Å–ª–µ bind() —Å–µ—Ä–≤–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–∂–∏–¥–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é listen().



int server_socket = socket(AF_INET, SOCK_STREAM, 0); // –°–æ–∑–¥–∞—ë–º —Å–æ–∫–µ—Ç

struct sockaddr_in server_addr;
server_addr.sin_family = AF_INET;
server_addr.sin_port = htons(8080); // –ü–æ—Ä—Ç 8080
server_addr.sin_addr.s_addr = INADDR_ANY; // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö

bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)); // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –∫ IP –∏ –ø–æ—Ä—Ç—É
listen(server_socket, SOMAXCONN); // –ù–∞—á–∏–Ω–∞–µ–º —Å–ª—É—à–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
->INADDR_ANY (0.0.0.0) ‚Äî —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP (–ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏ –≤–Ω–µ—à–Ω–∏—Ö).

–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, "192.168.1.100") ‚Äî —Ç–æ–≥–¥–∞ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–º IP.`
int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket == -1) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–∫–µ—Ç–∞" << std::endl;
        return 1;
    }

    sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(8080);  // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ—Ä—Ç—É 8080

    // –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É IP (–Ω–∞–ø—Ä–∏–º–µ—Ä, 192.168.1.100)
    if (inet_pton(AF_INET, "192.168.1.100", &server_addr.sin_addr) <= 0) {
        std::cerr << "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ IP-–∞–¥—Ä–µ—Å–∞" << std::endl;
        return 1;
    }//–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É IP.

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –∫ IP –∏ –ø–æ—Ä—Ç—É
    if (bind(server_socket, (sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        std::cerr << "–û—à–∏–±–∫–∞ bind()" << std::endl;
        return 1;
    }